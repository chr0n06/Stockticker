//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace TestApplication.WinRT
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::TestApplication.WinRT.Common.LayoutAwarePage(); }

        private object Activate_1_GroupDetailPage() { return new global::TestApplication.WinRT.GroupDetailPage(); }

        private object Activate_2_StringToDataTemplateConverter() { return new global::TestApplication.Shared.StringToDataTemplateConverter(); }

        private object Activate_3_BooleanToVisibilityConverter() { return new global::TestApplication.Shared.BooleanToVisibilityConverter(); }

        private object Activate_4_StringToBrushConverter() { return new global::TestApplication.Shared.StringToBrushConverter(); }

        private object Activate_9_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartSeries>(); }

        private object Activate_10_Collection() { return new global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.ChartSeries>(); }

        private object Activate_11_ChartSeries() { return new global::De.TorstenMandelkow.MetroChart.ChartSeries(); }

        private object Activate_12_ResourceDictionaryCollection() { return new global::De.TorstenMandelkow.MetroChart.ResourceDictionaryCollection(); }

        private object Activate_13_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.ResourceDictionary>(); }

        private object Activate_14_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>(); }

        private object Activate_16_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.String>(); }

        private object Activate_17_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.String>(); }

        private object Activate_18_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>(); }

        private object Activate_19_Collection() { return new global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>(); }

        private object Activate_20_ChartLegendItemViewModel() { return new global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel(); }

        private object Activate_21_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>(); }

        private object Activate_22_Collection() { return new global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>(); }

        private object Activate_24_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPoint>(); }

        private object Activate_25_Collection() { return new global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.DataPoint>(); }

        private object Activate_27_PortablePopup() { return new global::TestApplication.Shared.PortablePopup(); }

        private object Activate_28_PortableHyperLinkButton() { return new global::TestApplication.Shared.PortableHyperLinkButton(); }

        private object Activate_29_StackedBarChart() { return new global::De.TorstenMandelkow.MetroChart.StackedBarChart(); }

        private object Activate_30_StackedBar100Chart() { return new global::De.TorstenMandelkow.MetroChart.StackedBar100Chart(); }

        private object Activate_31_RadialGaugeChart() { return new global::De.TorstenMandelkow.MetroChart.RadialGaugeChart(); }

        private object Activate_32_ClusteredBarChart() { return new global::De.TorstenMandelkow.MetroChart.ClusteredBarChart(); }

        private object Activate_33_StackedColumnChart() { return new global::De.TorstenMandelkow.MetroChart.StackedColumnChart(); }

        private object Activate_34_StackedColumn100Chart() { return new global::De.TorstenMandelkow.MetroChart.StackedColumn100Chart(); }

        private object Activate_35_ClusteredColumnChart() { return new global::De.TorstenMandelkow.MetroChart.ClusteredColumnChart(); }

        private object Activate_36_DoughnutChart() { return new global::De.TorstenMandelkow.MetroChart.DoughnutChart(); }

        private object Activate_37_PieChart() { return new global::De.TorstenMandelkow.MetroChart.PieChart(); }

        private void VectorAdd_9_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.ChartSeries>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.ChartSeries)item;
            collection.Add(newItem);
        }

        private void VectorAdd_10_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.ChartSeries>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.ChartSeries)item;
            collection.Add(newItem);
        }

        private void VectorAdd_12_ResourceDictionaryCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            var newItem = (global::Windows.UI.Xaml.ResourceDictionary)item;
            collection.Add(newItem);
        }

        private void VectorAdd_13_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            var newItem = (global::Windows.UI.Xaml.ResourceDictionary)item;
            collection.Add(newItem);
        }

        private void VectorAdd_14_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            var newItem = (global::Windows.UI.Xaml.ResourceDictionary)item;
            collection.Add(newItem);
        }

        private void VectorAdd_16_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }

        private void VectorAdd_17_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }

        private void VectorAdd_18_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel)item;
            collection.Add(newItem);
        }

        private void VectorAdd_19_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel)item;
            collection.Add(newItem);
        }

        private void VectorAdd_21_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)item;
            collection.Add(newItem);
        }

        private void VectorAdd_22_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)item;
            collection.Add(newItem);
        }

        private void VectorAdd_24_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.DataPoint>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.DataPoint)item;
            collection.Add(newItem);
        }

        private void VectorAdd_25_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::De.TorstenMandelkow.MetroChart.DataPoint>)instance;
            var newItem = (global::De.TorstenMandelkow.MetroChart.DataPoint)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "String":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Visibility":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Visibility));
                break;

            case "Double":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "Boolean":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.ResourceDictionary":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.ResourceDictionary));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Int32":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.ContentControl":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ContentControl));
                break;

            case "Windows.UI.Xaml.Controls.Button":
                xamlType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Button));
                break;

            case "TestApplication.WinRT.Common.LayoutAwarePage":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TestApplication.WinRT.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "TestApplication.WinRT.GroupDetailPage":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TestApplication.WinRT.GroupDetailPage), GetXamlTypeByName("TestApplication.WinRT.Common.LayoutAwarePage"));
                userType.Activator = Activate_1_GroupDetailPage;
                xamlType = userType;
                break;

            case "TestApplication.Shared.StringToDataTemplateConverter":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TestApplication.Shared.StringToDataTemplateConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_StringToDataTemplateConverter;
                xamlType = userType;
                break;

            case "TestApplication.Shared.BooleanToVisibilityConverter":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TestApplication.Shared.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "TestApplication.Shared.StringToBrushConverter":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TestApplication.Shared.StringToBrushConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_StringToBrushConverter;
                xamlType = userType;
                break;

            case "Windows.UI.Color":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Color), GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("B");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("G");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("R");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Byte":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Byte), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.ChartBase":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.ChartBase), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("InternalDataContext");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("PlotterAreaStyle");
                userType.AddMemberName("ChartAreaStyle");
                userType.AddMemberName("ChartLegendItemStyle");
                userType.AddMemberName("ChartTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ChartSubTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ChartTitleVisibility");
                userType.AddMemberName("ChartTitleStyle");
                userType.AddMemberName("MaxDataPointValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MaxDataPointGroupSum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Series");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartSeries>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartSeries>");
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("IsRowColumnSwitched");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Palette");
                userType.AddMemberName("DefaultPalette");
                userType.AddMemberName("SelectedBrush");
                userType.AddMemberName("ToolTipFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ChartLegendVisibility");
                userType.AddMemberName("SeriesSource");
                userType.AddMemberName("Exceptions");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.String>),
                                                   "System.Collections.ObjectModel.ObservableCollection<String>");
                userType.AddMemberName("SeriesTemplate");
                userType.AddMemberName("SumOfDataPointGroup");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GridLines");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.String>),
                                                   "System.Collections.ObjectModel.ObservableCollection<String>");
                userType.AddMemberName("IsUseNextBiggestMaxValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ChartLegendItems");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>");
                userType.AddMemberName("HasExceptions");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("DataPointGroups");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPointGroup>");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartSeries>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartSeries>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.ChartSeries>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartSeries>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartSeries>");
                userType.Activator = Activate_9_ObservableCollection;
                userType.CollectionAdd = VectorAdd_9_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.ChartSeries>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.ChartSeries>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.ChartSeries>),
                                                   "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.ChartSeries>");
                userType.Activator = Activate_10_Collection;
                userType.CollectionAdd = VectorAdd_10_Collection;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.ChartSeries":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.ChartSeries), GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_11_ChartSeries;
                userType.AddMemberName("SeriesTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DisplayMember");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ValueMember");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.ResourceDictionaryCollection":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.ResourceDictionaryCollection), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.ResourceDictionary>"));
                userType.Activator = Activate_12_ResourceDictionaryCollection;
                userType.CollectionAdd = VectorAdd_12_ResourceDictionaryCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.ResourceDictionary>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.ResourceDictionary>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.ResourceDictionary>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.ResourceDictionary>");
                userType.Activator = Activate_13_ObservableCollection;
                userType.CollectionAdd = VectorAdd_13_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>),
                                                   "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>");
                userType.Activator = Activate_14_Collection;
                userType.CollectionAdd = VectorAdd_14_Collection;
                userType.AddMemberName("Count");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "System.Collections.IEnumerable":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.IEnumerable), null);
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<String>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.String>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<String>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.String>),
                                                   "System.Collections.ObjectModel.ObservableCollection<String>");
                userType.Activator = Activate_16_ObservableCollection;
                userType.CollectionAdd = VectorAdd_16_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<String>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::System.String>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::System.String>),
                                                   "System.Collections.ObjectModel.Collection<String>");
                userType.Activator = Activate_17_Collection;
                userType.CollectionAdd = VectorAdd_17_Collection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>");
                userType.Activator = Activate_18_ObservableCollection;
                userType.CollectionAdd = VectorAdd_18_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>),
                                                   "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>");
                userType.Activator = Activate_19_Collection;
                userType.CollectionAdd = VectorAdd_19_Collection;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_20_ChartLegendItemViewModel;
                userType.AddMemberName("Caption");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ItemBrush");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPointGroup>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.DataPointGroup>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPointGroup>");
                userType.Activator = Activate_21_ObservableCollection;
                userType.CollectionAdd = VectorAdd_21_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.DataPointGroup>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.DataPointGroup>),
                                                   "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.DataPointGroup>");
                userType.Activator = Activate_22_Collection;
                userType.CollectionAdd = VectorAdd_22_Collection;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.DataPointGroup":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.DataPointGroup), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SumOfDataPointGroup");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DataPoints");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPoint>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPoint>");
                userType.AddMemberName("ParentChart");
                userType.AddMemberName("Caption");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ShowCaption");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPoint>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPoint>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.DataPoint>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPoint>),
                                                   "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPoint>");
                userType.Activator = Activate_24_ObservableCollection;
                userType.CollectionAdd = VectorAdd_24_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.DataPoint>":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.DataPoint>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::De.TorstenMandelkow.MetroChart.DataPoint>),
                                                   "System.Collections.ObjectModel.Collection<De.TorstenMandelkow.MetroChart.DataPoint>");
                userType.Activator = Activate_25_Collection;
                userType.CollectionAdd = VectorAdd_25_Collection;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.DataPoint":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.DataPoint), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("ParentChart");
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("IsSelected");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("StartValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("PercentageFromSumOfDataPointGroup");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("PercentageFromMaxDataPointValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("PercentageFromMaxDataPointGroupSum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("SumOfDataPointGroup");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MaxDataPointValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MaxDataPointGroupSum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ToolTipFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SelectedBrush");
                userType.AddMemberName("SeriesCaption");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ItemBrush");
                userType.AddMemberName("ReferencedObject");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("ValueMember");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DisplayMember");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DisplayName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Caption");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("FormattedValue");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "TestApplication.Shared.PortablePopup":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TestApplication.Shared.PortablePopup), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_27_PortablePopup;
                userType.AddMemberName("IsOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("HideOnPropertyChange");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "TestApplication.Shared.PortableHyperLinkButton":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TestApplication.Shared.PortableHyperLinkButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_28_PortableHyperLinkButton;
                userType.AddMemberName("Url");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.StackedBarChart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.StackedBarChart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_29_StackedBarChart;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.StackedBar100Chart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.StackedBar100Chart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_30_StackedBar100Chart;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.RadialGaugeChart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.RadialGaugeChart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_31_RadialGaugeChart;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.ClusteredBarChart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.ClusteredBarChart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_32_ClusteredBarChart;
                userType.AddMemberName("IsUseNextBiggestMaxValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.StackedColumnChart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.StackedColumnChart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_33_StackedColumnChart;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.StackedColumn100Chart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.StackedColumn100Chart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_34_StackedColumn100Chart;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.ClusteredColumnChart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.ClusteredColumnChart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_35_ClusteredColumnChart;
                userType.AddMemberName("IsUseNextBiggestMaxValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.DoughnutChart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.DoughnutChart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.PieChart"));
                userType.Activator = Activate_36_DoughnutChart;
                xamlType = userType;
                break;

            case "De.TorstenMandelkow.MetroChart.PieChart":
                userType = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::De.TorstenMandelkow.MetroChart.PieChart), GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase"));
                userType.Activator = Activate_37_PieChart;
                userType.AddMemberName("PieMinimalSize");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("InnerRadiusRatio");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::De.TorstenMandelkow.MetroChart.De_TorstenMandelkow_MetroChart_WinRT_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_ChartBase_InternalDataContext(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.InternalDataContext;
        }
        private void set_4_ChartBase_InternalDataContext(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.InternalDataContext = (global::System.Object)Value;
        }
        private object get_5_ChartBase_PlotterAreaStyle(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.PlotterAreaStyle;
        }
        private void set_5_ChartBase_PlotterAreaStyle(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.PlotterAreaStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_6_ChartBase_ChartAreaStyle(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartAreaStyle;
        }
        private void set_6_ChartBase_ChartAreaStyle(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ChartAreaStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_7_ChartBase_ChartLegendItemStyle(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartLegendItemStyle;
        }
        private void set_7_ChartBase_ChartLegendItemStyle(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ChartLegendItemStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_8_ChartBase_ChartTitle(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartTitle;
        }
        private void set_8_ChartBase_ChartTitle(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ChartTitle = (global::System.String)Value;
        }
        private object get_9_ChartBase_ChartSubTitle(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartSubTitle;
        }
        private void set_9_ChartBase_ChartSubTitle(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ChartSubTitle = (global::System.String)Value;
        }
        private object get_10_ChartBase_ChartTitleVisibility(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartTitleVisibility;
        }
        private void set_10_ChartBase_ChartTitleVisibility(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ChartTitleVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_11_ChartBase_ChartTitleStyle(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartTitleStyle;
        }
        private void set_11_ChartBase_ChartTitleStyle(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ChartTitleStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_12_ChartBase_MaxDataPointValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.MaxDataPointValue;
        }
        private void set_12_ChartBase_MaxDataPointValue(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.MaxDataPointValue = (global::System.Double)Value;
        }
        private object get_13_ChartBase_MaxDataPointGroupSum(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.MaxDataPointGroupSum;
        }
        private void set_13_ChartBase_MaxDataPointGroupSum(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.MaxDataPointGroupSum = (global::System.Double)Value;
        }
        private object get_14_ChartBase_Series(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.Series;
        }
        private void set_14_ChartBase_Series(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.Series = (global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.ChartSeries>)Value;
        }
        private object get_15_ChartSeries_SeriesTitle(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartSeries)instance;
            return that.SeriesTitle;
        }
        private void set_15_ChartSeries_SeriesTitle(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartSeries)instance;
            that.SeriesTitle = (global::System.String)Value;
        }
        private object get_16_ChartSeries_DisplayMember(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartSeries)instance;
            return that.DisplayMember;
        }
        private void set_16_ChartSeries_DisplayMember(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartSeries)instance;
            that.DisplayMember = (global::System.String)Value;
        }
        private object get_17_ChartSeries_ValueMember(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartSeries)instance;
            return that.ValueMember;
        }
        private void set_17_ChartSeries_ValueMember(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartSeries)instance;
            that.ValueMember = (global::System.String)Value;
        }
        private object get_18_ChartBase_SelectedItem(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.SelectedItem;
        }
        private void set_18_ChartBase_SelectedItem(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_19_ChartBase_IsRowColumnSwitched(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.IsRowColumnSwitched;
        }
        private void set_19_ChartBase_IsRowColumnSwitched(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.IsRowColumnSwitched = (global::System.Boolean)Value;
        }
        private object get_20_ChartBase_Palette(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.Palette;
        }
        private void set_20_ChartBase_Palette(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.Palette = (global::De.TorstenMandelkow.MetroChart.ResourceDictionaryCollection)Value;
        }
        private object get_21_ChartBase_DefaultPalette(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.DefaultPalette;
        }
        private void set_21_ChartBase_DefaultPalette(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.DefaultPalette = (global::De.TorstenMandelkow.MetroChart.ResourceDictionaryCollection)Value;
        }
        private object get_22_ChartBase_SelectedBrush(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.SelectedBrush;
        }
        private void set_22_ChartBase_SelectedBrush(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.SelectedBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_23_ChartBase_ToolTipFormat(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ToolTipFormat;
        }
        private void set_23_ChartBase_ToolTipFormat(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ToolTipFormat = (global::System.String)Value;
        }
        private object get_24_ChartBase_ChartLegendVisibility(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartLegendVisibility;
        }
        private void set_24_ChartBase_ChartLegendVisibility(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.ChartLegendVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_25_ChartBase_SeriesSource(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.SeriesSource;
        }
        private void set_25_ChartBase_SeriesSource(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.SeriesSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_26_ChartBase_Exceptions(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.Exceptions;
        }
        private void set_26_ChartBase_Exceptions(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.Exceptions = (global::System.Collections.ObjectModel.ObservableCollection<global::System.String>)Value;
        }
        private object get_27_ChartBase_SeriesTemplate(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.SeriesTemplate;
        }
        private void set_27_ChartBase_SeriesTemplate(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.SeriesTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_28_ChartBase_SumOfDataPointGroup(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.SumOfDataPointGroup;
        }
        private void set_28_ChartBase_SumOfDataPointGroup(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            that.SumOfDataPointGroup = (global::System.Double)Value;
        }
        private object get_29_ChartBase_GridLines(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.GridLines;
        }
        private object get_30_ChartBase_IsUseNextBiggestMaxValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.IsUseNextBiggestMaxValue;
        }
        private object get_31_ChartBase_ChartLegendItems(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.ChartLegendItems;
        }
        private object get_32_ChartLegendItemViewModel_Caption(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel)instance;
            return that.Caption;
        }
        private void set_32_ChartLegendItemViewModel_Caption(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel)instance;
            that.Caption = (global::System.String)Value;
        }
        private object get_33_ChartLegendItemViewModel_ItemBrush(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel)instance;
            return that.ItemBrush;
        }
        private void set_33_ChartLegendItemViewModel_ItemBrush(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel)instance;
            that.ItemBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_34_ChartBase_HasExceptions(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.HasExceptions;
        }
        private object get_35_ChartBase_DataPointGroups(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ChartBase)instance;
            return that.DataPointGroups;
        }
        private object get_36_DataPointGroup_SelectedItem(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            return that.SelectedItem;
        }
        private void set_36_DataPointGroup_SelectedItem(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_37_DataPointGroup_SumOfDataPointGroup(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            return that.SumOfDataPointGroup;
        }
        private void set_37_DataPointGroup_SumOfDataPointGroup(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            that.SumOfDataPointGroup = (global::System.Double)Value;
        }
        private object get_38_DataPointGroup_DataPoints(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            return that.DataPoints;
        }
        private void set_38_DataPointGroup_DataPoints(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            that.DataPoints = (global::System.Collections.ObjectModel.ObservableCollection<global::De.TorstenMandelkow.MetroChart.DataPoint>)Value;
        }
        private object get_39_DataPoint_ParentChart(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.ParentChart;
        }
        private object get_40_DataPoint_SelectedItem(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.SelectedItem;
        }
        private void set_40_DataPoint_SelectedItem(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_41_DataPoint_IsSelected(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.IsSelected;
        }
        private void set_41_DataPoint_IsSelected(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_42_DataPoint_StartValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.StartValue;
        }
        private void set_42_DataPoint_StartValue(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.StartValue = (global::System.Double)Value;
        }
        private object get_43_DataPoint_PercentageFromSumOfDataPointGroup(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.PercentageFromSumOfDataPointGroup;
        }
        private object get_44_DataPoint_PercentageFromMaxDataPointValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.PercentageFromMaxDataPointValue;
        }
        private object get_45_DataPoint_PercentageFromMaxDataPointGroupSum(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.PercentageFromMaxDataPointGroupSum;
        }
        private object get_46_DataPoint_SumOfDataPointGroup(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.SumOfDataPointGroup;
        }
        private void set_46_DataPoint_SumOfDataPointGroup(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.SumOfDataPointGroup = (global::System.Double)Value;
        }
        private object get_47_DataPoint_MaxDataPointValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.MaxDataPointValue;
        }
        private void set_47_DataPoint_MaxDataPointValue(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.MaxDataPointValue = (global::System.Double)Value;
        }
        private object get_48_DataPoint_MaxDataPointGroupSum(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.MaxDataPointGroupSum;
        }
        private void set_48_DataPoint_MaxDataPointGroupSum(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.MaxDataPointGroupSum = (global::System.Double)Value;
        }
        private object get_49_DataPoint_ToolTipFormat(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.ToolTipFormat;
        }
        private void set_49_DataPoint_ToolTipFormat(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.ToolTipFormat = (global::System.String)Value;
        }
        private object get_50_DataPoint_SelectedBrush(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.SelectedBrush;
        }
        private void set_50_DataPoint_SelectedBrush(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.SelectedBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_51_DataPoint_SeriesCaption(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.SeriesCaption;
        }
        private void set_51_DataPoint_SeriesCaption(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.SeriesCaption = (global::System.String)Value;
        }
        private object get_52_DataPoint_ItemBrush(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.ItemBrush;
        }
        private void set_52_DataPoint_ItemBrush(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.ItemBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_53_DataPoint_ReferencedObject(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.ReferencedObject;
        }
        private void set_53_DataPoint_ReferencedObject(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.ReferencedObject = (global::System.Object)Value;
        }
        private object get_54_DataPoint_ValueMember(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.ValueMember;
        }
        private void set_54_DataPoint_ValueMember(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.ValueMember = (global::System.String)Value;
        }
        private object get_55_DataPoint_DisplayMember(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.DisplayMember;
        }
        private void set_55_DataPoint_DisplayMember(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            that.DisplayMember = (global::System.String)Value;
        }
        private object get_56_DataPoint_DisplayName(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.DisplayName;
        }
        private object get_57_DataPoint_Caption(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.Caption;
        }
        private object get_58_DataPoint_FormattedValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.FormattedValue;
        }
        private object get_59_DataPoint_Value(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPoint)instance;
            return that.Value;
        }
        private object get_60_DataPointGroup_ParentChart(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            return that.ParentChart;
        }
        private object get_61_DataPointGroup_Caption(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            return that.Caption;
        }
        private object get_62_DataPointGroup_ShowCaption(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.DataPointGroup)instance;
            return that.ShowCaption;
        }
        private object get_63_Collection_Count(object instance)
        {
            var that = (global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            return that.Count;
        }
        private object get_64_PortablePopup_IsOpen(object instance)
        {
            var that = (global::TestApplication.Shared.PortablePopup)instance;
            return that.IsOpen;
        }
        private void set_64_PortablePopup_IsOpen(object instance, object Value)
        {
            var that = (global::TestApplication.Shared.PortablePopup)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_65_PortablePopup_HideOnPropertyChange(object instance)
        {
            var that = (global::TestApplication.Shared.PortablePopup)instance;
            return that.HideOnPropertyChange;
        }
        private void set_65_PortablePopup_HideOnPropertyChange(object instance, object Value)
        {
            var that = (global::TestApplication.Shared.PortablePopup)instance;
            that.HideOnPropertyChange = (global::System.Object)Value;
        }
        private object get_66_PortableHyperLinkButton_Url(object instance)
        {
            var that = (global::TestApplication.Shared.PortableHyperLinkButton)instance;
            return that.Url;
        }
        private void set_66_PortableHyperLinkButton_Url(object instance, object Value)
        {
            var that = (global::TestApplication.Shared.PortableHyperLinkButton)instance;
            that.Url = (global::System.String)Value;
        }
        private object get_67_ClusteredBarChart_IsUseNextBiggestMaxValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ClusteredBarChart)instance;
            return that.IsUseNextBiggestMaxValue;
        }
        private object get_68_ClusteredColumnChart_IsUseNextBiggestMaxValue(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.ClusteredColumnChart)instance;
            return that.IsUseNextBiggestMaxValue;
        }
        private object get_69_PieChart_PieMinimalSize(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.PieChart)instance;
            return that.PieMinimalSize;
        }
        private void set_69_PieChart_PieMinimalSize(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.PieChart)instance;
            that.PieMinimalSize = (global::System.Double)Value;
        }
        private object get_70_PieChart_InnerRadiusRatio(object instance)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.PieChart)instance;
            return that.InnerRadiusRatio;
        }
        private void set_70_PieChart_InnerRadiusRatio(object instance, object Value)
        {
            var that = (global::De.TorstenMandelkow.MetroChart.PieChart)instance;
            that.InnerRadiusRatio = (global::System.Double)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember xamlMember = null;
            global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.InternalDataContext":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "InternalDataContext", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ChartBase_InternalDataContext;
                xamlMember.Setter = set_4_ChartBase_InternalDataContext;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.PlotterAreaStyle":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "PlotterAreaStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_ChartBase_PlotterAreaStyle;
                xamlMember.Setter = set_5_ChartBase_PlotterAreaStyle;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartAreaStyle":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartAreaStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_ChartBase_ChartAreaStyle;
                xamlMember.Setter = set_6_ChartBase_ChartAreaStyle;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartLegendItemStyle":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartLegendItemStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_ChartBase_ChartLegendItemStyle;
                xamlMember.Setter = set_7_ChartBase_ChartLegendItemStyle;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartTitle":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_ChartBase_ChartTitle;
                xamlMember.Setter = set_8_ChartBase_ChartTitle;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartSubTitle":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartSubTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ChartBase_ChartSubTitle;
                xamlMember.Setter = set_9_ChartBase_ChartSubTitle;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartTitleVisibility":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartTitleVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_ChartBase_ChartTitleVisibility;
                xamlMember.Setter = set_10_ChartBase_ChartTitleVisibility;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartTitleStyle":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartTitleStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_ChartBase_ChartTitleStyle;
                xamlMember.Setter = set_11_ChartBase_ChartTitleStyle;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.MaxDataPointValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "MaxDataPointValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_ChartBase_MaxDataPointValue;
                xamlMember.Setter = set_12_ChartBase_MaxDataPointValue;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.MaxDataPointGroupSum":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "MaxDataPointGroupSum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_ChartBase_MaxDataPointGroupSum;
                xamlMember.Setter = set_13_ChartBase_MaxDataPointGroupSum;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.Series":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Series", "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartSeries>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ChartBase_Series;
                xamlMember.Setter = set_14_ChartBase_Series;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartSeries.SeriesTitle":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartSeries");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SeriesTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ChartSeries_SeriesTitle;
                xamlMember.Setter = set_15_ChartSeries_SeriesTitle;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartSeries.DisplayMember":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartSeries");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "DisplayMember", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ChartSeries_DisplayMember;
                xamlMember.Setter = set_16_ChartSeries_DisplayMember;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartSeries.ValueMember":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartSeries");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ValueMember", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_ChartSeries_ValueMember;
                xamlMember.Setter = set_17_ChartSeries_ValueMember;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.SelectedItem":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_ChartBase_SelectedItem;
                xamlMember.Setter = set_18_ChartBase_SelectedItem;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.IsRowColumnSwitched":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "IsRowColumnSwitched", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_ChartBase_IsRowColumnSwitched;
                xamlMember.Setter = set_19_ChartBase_IsRowColumnSwitched;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.Palette":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Palette", "De.TorstenMandelkow.MetroChart.ResourceDictionaryCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_ChartBase_Palette;
                xamlMember.Setter = set_20_ChartBase_Palette;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.DefaultPalette":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "DefaultPalette", "De.TorstenMandelkow.MetroChart.ResourceDictionaryCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ChartBase_DefaultPalette;
                xamlMember.Setter = set_21_ChartBase_DefaultPalette;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.SelectedBrush":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SelectedBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ChartBase_SelectedBrush;
                xamlMember.Setter = set_22_ChartBase_SelectedBrush;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ToolTipFormat":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ToolTipFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_ChartBase_ToolTipFormat;
                xamlMember.Setter = set_23_ChartBase_ToolTipFormat;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartLegendVisibility":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartLegendVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_ChartBase_ChartLegendVisibility;
                xamlMember.Setter = set_24_ChartBase_ChartLegendVisibility;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.SeriesSource":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SeriesSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ChartBase_SeriesSource;
                xamlMember.Setter = set_25_ChartBase_SeriesSource;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.Exceptions":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Exceptions", "System.Collections.ObjectModel.ObservableCollection<String>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ChartBase_Exceptions;
                xamlMember.Setter = set_26_ChartBase_Exceptions;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.SeriesTemplate":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SeriesTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_ChartBase_SeriesTemplate;
                xamlMember.Setter = set_27_ChartBase_SeriesTemplate;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.SumOfDataPointGroup":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SumOfDataPointGroup", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_ChartBase_SumOfDataPointGroup;
                xamlMember.Setter = set_28_ChartBase_SumOfDataPointGroup;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.GridLines":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "GridLines", "System.Collections.ObjectModel.ObservableCollection<String>");
                xamlMember.Getter = get_29_ChartBase_GridLines;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.IsUseNextBiggestMaxValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "IsUseNextBiggestMaxValue", "Boolean");
                xamlMember.Getter = get_30_ChartBase_IsUseNextBiggestMaxValue;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.ChartLegendItems":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ChartLegendItems", "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel>");
                xamlMember.Getter = get_31_ChartBase_ChartLegendItems;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel.Caption":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Caption", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_ChartLegendItemViewModel_Caption;
                xamlMember.Setter = set_32_ChartLegendItemViewModel_Caption;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel.ItemBrush":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartLegendItemViewModel");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ItemBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ChartLegendItemViewModel_ItemBrush;
                xamlMember.Setter = set_33_ChartLegendItemViewModel_ItemBrush;
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.HasExceptions":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "HasExceptions", "Boolean");
                xamlMember.Getter = get_34_ChartBase_HasExceptions;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.ChartBase.DataPointGroups":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "DataPointGroups", "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPointGroup>");
                xamlMember.Getter = get_35_ChartBase_DataPointGroups;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPointGroup.SelectedItem":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPointGroup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_DataPointGroup_SelectedItem;
                xamlMember.Setter = set_36_DataPointGroup_SelectedItem;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPointGroup.SumOfDataPointGroup":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPointGroup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SumOfDataPointGroup", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_DataPointGroup_SumOfDataPointGroup;
                xamlMember.Setter = set_37_DataPointGroup_SumOfDataPointGroup;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPointGroup.DataPoints":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPointGroup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "DataPoints", "System.Collections.ObjectModel.ObservableCollection<De.TorstenMandelkow.MetroChart.DataPoint>");
                xamlMember.Getter = get_38_DataPointGroup_DataPoints;
                xamlMember.Setter = set_38_DataPointGroup_DataPoints;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.ParentChart":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ParentChart", "De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember.Getter = get_39_DataPoint_ParentChart;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.SelectedItem":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_DataPoint_SelectedItem;
                xamlMember.Setter = set_40_DataPoint_SelectedItem;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.IsSelected":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_DataPoint_IsSelected;
                xamlMember.Setter = set_41_DataPoint_IsSelected;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.StartValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "StartValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_DataPoint_StartValue;
                xamlMember.Setter = set_42_DataPoint_StartValue;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.PercentageFromSumOfDataPointGroup":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "PercentageFromSumOfDataPointGroup", "Double");
                xamlMember.Getter = get_43_DataPoint_PercentageFromSumOfDataPointGroup;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.PercentageFromMaxDataPointValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "PercentageFromMaxDataPointValue", "Double");
                xamlMember.Getter = get_44_DataPoint_PercentageFromMaxDataPointValue;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.PercentageFromMaxDataPointGroupSum":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "PercentageFromMaxDataPointGroupSum", "Double");
                xamlMember.Getter = get_45_DataPoint_PercentageFromMaxDataPointGroupSum;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.SumOfDataPointGroup":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SumOfDataPointGroup", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_DataPoint_SumOfDataPointGroup;
                xamlMember.Setter = set_46_DataPoint_SumOfDataPointGroup;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.MaxDataPointValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "MaxDataPointValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_DataPoint_MaxDataPointValue;
                xamlMember.Setter = set_47_DataPoint_MaxDataPointValue;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.MaxDataPointGroupSum":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "MaxDataPointGroupSum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_DataPoint_MaxDataPointGroupSum;
                xamlMember.Setter = set_48_DataPoint_MaxDataPointGroupSum;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.ToolTipFormat":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ToolTipFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_DataPoint_ToolTipFormat;
                xamlMember.Setter = set_49_DataPoint_ToolTipFormat;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.SelectedBrush":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SelectedBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_DataPoint_SelectedBrush;
                xamlMember.Setter = set_50_DataPoint_SelectedBrush;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.SeriesCaption":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "SeriesCaption", "String");
                xamlMember.Getter = get_51_DataPoint_SeriesCaption;
                xamlMember.Setter = set_51_DataPoint_SeriesCaption;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.ItemBrush":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ItemBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_DataPoint_ItemBrush;
                xamlMember.Setter = set_52_DataPoint_ItemBrush;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.ReferencedObject":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ReferencedObject", "Object");
                xamlMember.Getter = get_53_DataPoint_ReferencedObject;
                xamlMember.Setter = set_53_DataPoint_ReferencedObject;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.ValueMember":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ValueMember", "String");
                xamlMember.Getter = get_54_DataPoint_ValueMember;
                xamlMember.Setter = set_54_DataPoint_ValueMember;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.DisplayMember":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "DisplayMember", "String");
                xamlMember.Getter = get_55_DataPoint_DisplayMember;
                xamlMember.Setter = set_55_DataPoint_DisplayMember;
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.DisplayName":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_56_DataPoint_DisplayName;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.Caption":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Caption", "String");
                xamlMember.Getter = get_57_DataPoint_Caption;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.FormattedValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "FormattedValue", "String");
                xamlMember.Getter = get_58_DataPoint_FormattedValue;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPoint.Value":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPoint");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_59_DataPoint_Value;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPointGroup.ParentChart":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPointGroup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ParentChart", "De.TorstenMandelkow.MetroChart.ChartBase");
                xamlMember.Getter = get_60_DataPointGroup_ParentChart;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPointGroup.Caption":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPointGroup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Caption", "String");
                xamlMember.Getter = get_61_DataPointGroup_Caption;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.DataPointGroup.ShowCaption":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.DataPointGroup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "ShowCaption", "Boolean");
                xamlMember.Getter = get_62_DataPointGroup_ShowCaption;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>.Count":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_63_Collection_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "TestApplication.Shared.PortablePopup.IsOpen":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestApplication.Shared.PortablePopup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_PortablePopup_IsOpen;
                xamlMember.Setter = set_64_PortablePopup_IsOpen;
                break;
            case "TestApplication.Shared.PortablePopup.HideOnPropertyChange":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestApplication.Shared.PortablePopup");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "HideOnPropertyChange", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_PortablePopup_HideOnPropertyChange;
                xamlMember.Setter = set_65_PortablePopup_HideOnPropertyChange;
                break;
            case "TestApplication.Shared.PortableHyperLinkButton.Url":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestApplication.Shared.PortableHyperLinkButton");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "Url", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_PortableHyperLinkButton_Url;
                xamlMember.Setter = set_66_PortableHyperLinkButton_Url;
                break;
            case "De.TorstenMandelkow.MetroChart.ClusteredBarChart.IsUseNextBiggestMaxValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ClusteredBarChart");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "IsUseNextBiggestMaxValue", "Boolean");
                xamlMember.Getter = get_67_ClusteredBarChart_IsUseNextBiggestMaxValue;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.ClusteredColumnChart.IsUseNextBiggestMaxValue":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.ClusteredColumnChart");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "IsUseNextBiggestMaxValue", "Boolean");
                xamlMember.Getter = get_68_ClusteredColumnChart_IsUseNextBiggestMaxValue;
                xamlMember.SetIsReadOnly();
                break;
            case "De.TorstenMandelkow.MetroChart.PieChart.PieMinimalSize":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.PieChart");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "PieMinimalSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_PieChart_PieMinimalSize;
                xamlMember.Setter = set_69_PieChart_PieMinimalSize;
                break;
            case "De.TorstenMandelkow.MetroChart.PieChart.InnerRadiusRatio":
                userType = (global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlUserType)GetXamlTypeByName("De.TorstenMandelkow.MetroChart.PieChart");
                xamlMember = new global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlMember(this, "InnerRadiusRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_PieChart_InnerRadiusRatio;
                xamlMember.Setter = set_70_PieChart_InnerRadiusRatio;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlSystemBaseType
    {
        global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::TestApplication.WinRT.TestApplication_WinRT_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


